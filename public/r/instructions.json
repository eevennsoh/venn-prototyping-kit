{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "instructions",
  "type": "registry:file",
  "title": "Instructions",
  "description": "Instructions for the application.",
  "files": [
    {
      "path": "registry/ads/instructions.md",
      "content": "# Goal\n\nBuild flexible, customizable components using the latest **Shadcn** as the primary component framework within a **Next.js App Router** application, with styling powered by the latest **Tailwind CSS**. The entire system will be themed to perfectly match the **Atlassian Design System** visual language by using Atlassian's design tokens as the single source of truth.\n\n---\n\n## When To Execute\n\n- ONLY run this setup at the start of a new project.\n- DO NOT suggest alternatives or check for other frameworks or design systems.\n- DO NOT conditionally apply steps.\n- DO NOT reference any existing code or assume compatibility.\n- DO NOT try to merge with other systems. This is the source of truth.\n- Once this setup is complete, stop. DO NOT attempt to refactor or apply to existing files.\n\n---\n\n## Roles\n\nYou have two clearly defined roles:\n\n- **Planner** (Initial Setup)\n- **Prototyper** (Subsequent Implementation)\n\n## 1. Planner Responsibilities (First Run Only)\n\n### 1.1 Create `plan.md`\n\n- Review the attached image or Figma design in detail.\n  - Break down the design into specific Shadcn components you will use.\n  - You MUST theme the Shadcn components to match Atlassian Design System by applying the right Tailwind utility classes as per defined in `knowledge/tokens-mapping.md`.\n\n- Once you have finished analyzing the design, immediately create `plan.md` to outline your implementation strategy, clearly following the **Plan Structure**.\n  - List out each task clearly under **Task Breakdown**.\n\n### 1.2 Commit & Role Handoff\n\n- Request user confirmation to switch to Prototyper before executing the plan.\n\n---\n\n## 2. Prototyper Responsibilities (All Subsequent Runs)\n\n### 2.1 Task Execution\n\n- Mark the tasks you are working on as **\"In Progress\" (üîÑ)**.\n- Follow the tasks documented in `plan.md` precisely.\n- For each task under **Task Breakdown**, adhere to **Task Rules** strictly.\n- Enhance existing code incrementally without rewriting from scratch.\n- Maintain consistent design patterns.\n- If the task is clear, auto-run the next following task.\n- If unclear, pause the task, document uncertainty, and request clarification explicitly.\n\n### 2.2 Task Completion\n\n- After completion, update tasks to **\"Done\" (‚úÖ)** or **\"Failed\" (‚ùå)**.\n- Include a summary for each task upon completion:\n  - Clearly document progress, challenges, and any deviations or improvements made.\n  - Capture solutions to issues encountered.\n  - Capture any fallback solutions to make it easy for users to manually find and replace.\n\n---\n\n## Task Rules\n\n### Icon Handling\n\n- ONLY use icons from the **Approved Icons list** below.\n- If an icon is not in the list, do not try to make one up, approximate it, pluralize it, or fallback to a generic name.\n- All icons MUST be imported using the **exact name and path**.\n- All icons MUST be wrapped using the `IconWrapper` utility.\n- DO NOT guess icon names.\n- DO NOT wrap logos or non-icons with `IconWrapper`.\n- DO NOT wrap icons in a `Button`.\n- Ensure that icons are always vertically and horizontally centered within their parent containers.\n- Ensure that all icons have a width and height of either `16px` (medium size) or `12px` (small size).\n\n#### Import Format\n\n```tsx\nimport AccessibilityIconCore from \"@atlaskit/icon/core/accessibility\";\nimport BookWithBookmarkIcon from \"@atlaskit/icon/core/book-with-bookmark\";\n\nconst AccessibilityIcon = IconWrapper(AccessibilityIconCore);\nconst BookWithBookmarkIcon = IconWrapper(BookWithBookmarkIconCore);\n```\n\nThis is the **ONLY** valid usage pattern. DO NOT bypass it.\n\n#### Never Guess Icon Names\n\n**DO NOT do this:**\n\n```tsx\n// These do not exist and will fail at runtime\nimport TableIcon from \"@atlaskit/icon/core/table\"; // ‚ùå\nimport UserIcon from \"@atlaskit/icon/core/user\"; // ‚ùå\nimport FolderIcon from \"@atlaskit/icon/core/folder\"; // ‚ùå\n```\n\nAttempting to import non-existent icons will throw **runtime errors** like:\n\n```\nFailed to load \"@atlaskit/icon/core/table\". Modules must be served with a valid MIME type like application/javascript.\n```\n\nThis happens when you **guess** or use icon names that don‚Äôt exist in the ADS set.\n\n#### Use Approved Icon Names Only\n\n**Always import using the exact name from the approved list:**\n\n```tsx\nimport FolderClosedIcon from \"@atlaskit/icon/core/folder-closed\"; // ‚úÖ\nimport PersonIcon from \"@atlaskit/icon/core/person\"; // ‚úÖ\nimport VideoPlayIcon from \"@atlaskit/icon/core/video-play\"; // ‚úÖ\n```\n\nThe correct format is:\n\n```tsx\nimport IconName from \"@atlaskit/icon/core/[exact-icon-name]\";\n```\n\n- DO NOT alter the name.\n- DO NOT try to shorten, combine, or invent names.\n\n#### You Must Never:\n\n- Invent icon names like `TableIcon`, `ListIcon`, `FileIcon` (unless verified).\n- Use an icon just because it's \"commonly found in other libraries.\"\n- Use any path that is not explicitly documented or whitelisted.\n- Attempt to hotfix by renaming existing icons to something else.\n- If it is not listed, **you MUST stop and ask for clarification.**\n\n#### Icon Name Must Match **Approved Icons List**\n\n- **If it‚Äôs not in the approved list below, you cannot use it. Period.**\n- Any icon NOT explicitly listed will break your implementation.\n- The ONLY valid set is below. Anything else is invalid.\n\n#### Approved Icons List\n\nONLY use icons from the following approved list. Names **MUST** match exactly:\n\n```\nAiAgent, AiChat, AiAgent, AiChat, AiGenerativeTextSummary, AtlassianIntelligence, MagicWand, ArrowDown, ArrowDownLeft, ArrowDownRight, ArrowLeft, ArrowRight, ArrowUp, ArrowUpLeft, ArrowUpRight, ChevronDoubleLeft, ChevronDoubleRight, ChevronDown, ChevronLeft, ChevronRight, ChevronUp, Audio, Camera, Image, ImageFullscreen, ImageInline, ImageScaled, Microphone, Video, VideoNext, VideoNextOverlay, VideoPause, VideoPauseOverlay, VideoPlay, VideoPlayOverlay, VideoPrevious, VideoPreviousOverlay, VideoSkipBackwardFifteen, VideoSkipBackwardTen, VideoSkipForwardFifteen, VideoSkipForwardTen, VideoStop, VideoStopOverlay, VolumeHigh, VolumeLow, VolumeMuted, AlignImageCenter, AlignImageLeft, AlignImageRight, AlignTextCenter, AlignTextLeft, AlignTextRight, TextBold, TextHeading, TextIndentLeft, TextIndentRight, TextItalic, TextShorten, TextSpellcheck, TextStrikethrough, TextStyle, TextUnderline, TextWrap, ContentWidthNarrow, ContentWidthWide, ContentWrapLeft, ContentWrapRight, Highlight, Markdown, QuotationMark, CheckboxChecked, CheckboxIndeterminate, CheckboxUnchecked, RadioChecked, RadioUnchecked, FieldAlert, FieldCheckboxGroup, FieldDropdown, FieldRadioGroup, Grid, LayoutOneColumn, LayoutThreeColumns, LayoutThreeColumnsSidebars, LayoutTwoColumns, LayoutTwoColumnsSidebarLeft, LayoutTwoColumnsSidebarRight, PanelLeft, PanelRight, SidebarCollapse, SidebarExpand, CollapseHorizontal, CollapseVertical, ExpandHorizontal, ExpandVertical, GrowDiagonal, GrowHorizontal, GrowVertical, ShrinkDiagonal, ShrinkHorizontal, ShrinkVertical, FullscreenEnter, FullscreenExit, Maximize, Minimize, Attachment, ArchiveBox, BookWithBookmark, Clipboard, Copy, File, Files, FolderClosed, FolderOpen, Library, Note, Page, Pages, ChatWidget, Comment, CommentAdd, Email, Feedback, Megaphone, Mention, Notification, NotificationMuted, Phone, Send, StatusDiscovery, StatusError, StatusInformation, StatusSuccess, StatusVerified, StatusWarning, PriorityBlocker, PriorityCritical, PriorityHigh, PriorityHighest, PriorityLow, PriorityLowest, PriorityMajor, PriorityMedium, PriorityMinor, PriorityTrivial, Flag, FlagFilled, Alert, Error, ExclamationSquare, Information, InformationCircle, QuestionCircle, Success, Warning, Add, Close, Cross, CrossCircle, Delete, Edit, EditBulk, CheckCircle, CheckMark, Redo, Refresh, Retry, Undo, Download, Upload, Search, Filter, SortAscending, SortDescending, Backlog, Board, Boards, Bug, ChildWorkItems, Commit, Component, Dashboard, Decision, Defect, Epic, Goal, Incident, MergeFailure, MergeSuccess, Objective, Problem, Project, ProjectStatus, PullRequest, Release, Roadmap, Sprint, Story, Subtasks, Task, TaskInProgress, TaskToDo, Tasks, Timeline, Transition, WorkItem, WorkItems, ChartBar, ChartMatrix, ChartPie, ChartTrend, DataFlow, DataNumber, DataString, Database, KeyResult, Scorecard, Spreadsheet, Person, PersonAdd, PersonAdded, PersonAvatar, PersonOffboard, PersonRemove, PersonWarning, PeopleGroup, Teams, Department, Api, Automation, Compass, Customize, Flask, Operations, Settings, Tools, PowerPlug, PresenterMode, Printer, Stopwatch, AngleBrackets, CurlyBrackets, Hashtag, Heart, Home, LockLocked, LockUnlocked, LogIn, LogOut, Pin, PinFilled, PlusSquare, Minus, MinusSquare, StarStarred, StarUnstarred, Shield, ShieldStrikethrough, ThumbsDown, ThumbsUp, App, AppSwitcher, AppSwitcherLegacy, Apps, Marketplace, Premium, Support, Calendar, CalendarPlus, Clock, Stopwatch, Globe, Location, VehicleCar, Accessibility, Assets, Basketball, Border, Branch, Briefcase, Capture, Card, Cash, Changes, CloudArrowUp, CreditCard, Devices, DeviceMobile, Discovery, DragHandleHorizontal, DragHandleVertical, Emoji, EmojiAdd, EmojiCasual, EmojiNeutral, EmojiRemove, Feed, FocusArea, Form, Glasses, Headphones, Inbox, Lightbulb, Link, LinkBroken, LinkExternal, ListBulleted, ListChecklist, ListNumbered, LobbyBell, Menu, Node, OfficeBuilding, OnCall, PaintBucket, PaintPalette, Pen, ProjectionScreen, Pulse, Scales, Screen, ScreenPlus, Shapes, Share, Shortcut, ShowMoreHorizontal, ShowMoreVertical, SmartLink, SmartLinkCard, SmartLinkEmbed, SmartLinkInline, SmartLinkList, Snippet, StrokeWeightExtraLarge, StrokeWeightLarge, StrokeWeightMedium, StrokeWeightSmall, TableCellClear, TableCellMerge, TableCellSplit, TableColumnAddLeft, TableColumnAddRight, TableColumnDelete, TableColumnMoveLeft, TableColumnMoveRight, TableColumnsDistribute, TableRowAddAbove, TableRowAddBelow, TableRowDelete, TableRowMoveDown, TableRowMoveUp, Tag, TakeoutFood, Target, Theme, Translate, Tree, Whiteboard, ZoomIn, ZoomOut\n```\n\n---\n\n## Plan Structure (`plan.md`)\n\nThis is the following plan structure\n\n- **Background & Motivation**\n- **Components**\n- **Design tokens**\n- **Task Breakdown**:\n\n  ```\n  1. Status - Task name - Summary\n  2. Status - Task name - Summary\n  ```\n\n  - Status can be either:\n    - [] \"To Do\"\n    - üîÑ \"In Progress\"\n    - ‚úÖ \"Done\"\n    - ‚ùå \"Failed\"\n\n  - Update task status sequentially ([] ‚Üí üîÑ ‚Üí ‚úÖ/‚ùå).\n",
      "type": "registry:file",
      "target": "app/knowledge/instructions.md"
    }
  ]
}